
import streamlit as st
import random
import pandas as pd
import time
from datetime import datetime
from streamlit_agraph import agraph, Node, Edge, Config

st.set_page_config(layout="wide")
st.title("üîå –ü–æ–≤–Ω–∏–π —Å–∏–º—É–ª—è—Ç–æ—Ä –º–µ—Ä–µ–∂—ñ –∑ –¥–∏—Å–ø–µ—Ç—á–µ—Ä—Å—å–∫–æ—é, –≥—Ä–∞—Ñ–æ–º, –ø–æ–¥—ñ—è–º–∏ —Ç–∞ –∂—É—Ä–Ω–∞–ª–æ–º")

# -------------------------------
# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Å—Ç–∞–Ω—É
# -------------------------------
if "blocks" not in st.session_state:
    st.session_state.blocks = {
        f"TP{i}": {
            "enabled": True,
            "temperature": 0,
            "humidity": 0,
            "wind": 0,
            "status": "–ù–æ—Ä–º–∞"
        } for i in range(1, 5)
    }
if "events" not in st.session_state:
    st.session_state.events = []

# -------------------------------
# üîå –ë–æ–∫–æ–≤–∞ –ø–∞–Ω–µ–ª—å –ø–µ—Ä–µ–º–∏–∫–∞—á—ñ–≤
# -------------------------------
st.sidebar.title("‚öôÔ∏è –ö–µ—Ä—É–≤–∞–Ω–Ω—è –±–ª–æ–∫–∞–º–∏")
for name, blk in st.session_state.blocks.items():
    blk["enabled"] = st.sidebar.toggle(f"{name}: {'üü¢' if blk['enabled'] else 'üî¥'}", value=blk["enabled"])

# -------------------------------
# üîÅ –û–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤
# -------------------------------
if st.button("üîÅ –û–Ω–æ–≤–∏—Ç–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –±–ª–æ–∫—ñ–≤"):
    for name, blk in st.session_state.blocks.items():
        if blk["enabled"]:
            blk["temperature"] = round(random.uniform(-15, 10), 1)
            blk["humidity"] = round(random.uniform(40, 100), 1)
            blk["wind"] = round(random.uniform(0, 35), 1)
            if blk["temperature"] < -5 and blk["humidity"] > 80:
                blk["status"] = "–û–∂–µ–ª–µ–¥—å"
            elif blk["wind"] > 25:
                blk["status"] = "–ü–æ—Ä–∏–≤"
            else:
                blk["status"] = "–ù–æ—Ä–º–∞"
            st.session_state.events.append({
                "–ß–∞—Å": datetime.now().strftime("%H:%M:%S"),
                "–ë–ª–æ–∫": name,
                "–°—Ç–∞—Ç—É—Å": blk["status"],
                "–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞": blk["temperature"],
                "–í–æ–ª–æ–≥—ñ—Å—Ç—å": blk["humidity"],
                "–í—ñ—Ç–µ—Ä": blk["wind"]
            })

# -------------------------------
# üßë‚Äç‚úàÔ∏è –ü–∞–Ω–µ–ª—å –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
# -------------------------------
st.markdown("## üßë‚Äç‚úàÔ∏è –ü–∞–Ω–µ–ª—å –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞")

col1, col2 = st.columns(2)
if col1.button("üîå –í–∏–º–∫–Ω—É—Ç–∏ –≤—Å—ñ"):
    for blk in st.session_state.blocks.values():
        blk["enabled"] = False
        blk["status"] = "–í–∏–º–∫–Ω–µ–Ω–æ"

if col2.button("üßä –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –æ–∂–µ–ª–µ–¥—å"):
    for blk in st.session_state.blocks.values():
        if blk["enabled"] and blk["temperature"] < -5 and blk["humidity"] > 80:
            blk["status"] = "–û–∂–µ–ª–µ–¥—å"

# -------------------------------
# üìã –¢–∞–±–ª–∏—Ü—è –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤
# -------------------------------
st.markdown("## üìã –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ –¢–ü")
df = pd.DataFrame([
    {
        "–ë–ª–æ–∫": name,
        "–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞": blk["temperature"],
        "–í–æ–ª–æ–≥—ñ—Å—Ç—å": blk["humidity"],
        "–í—ñ—Ç–µ—Ä": blk["wind"],
        "–°—Ç–∞—Ç—É—Å": blk["status"]
    } for name, blk in st.session_state.blocks.items()
    if blk["enabled"]
])
st.dataframe(df, use_container_width=True)

# -------------------------------
# üìà –ì—Ä–∞—Ñ—ñ–∫–∏
# -------------------------------
if not df.empty:
    st.line_chart(df.set_index("–ë–ª–æ–∫")[["–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞", "–í–æ–ª–æ–≥—ñ—Å—Ç—å", "–í—ñ—Ç–µ—Ä"]])
    st.bar_chart(df["–°—Ç–∞—Ç—É—Å"].value_counts())

# -------------------------------
# üìù –ñ—É—Ä–Ω–∞–ª –ø–æ–¥—ñ–π
# -------------------------------
st.markdown("## üóÇ –ñ—É—Ä–Ω–∞–ª –ø–æ–¥—ñ–π")
log_df = pd.DataFrame(st.session_state.events)
if not log_df.empty:
    st.dataframe(log_df.tail(10), use_container_width=True)
    st.download_button("‚¨áÔ∏è –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –∂—É—Ä–Ω–∞–ª CSV", log_df.to_csv(index=False).encode("utf-8"), file_name="events.csv")

# -------------------------------
# ‚öôÔ∏è –°–∏–º—É–ª—è—Ü—ñ—è –ø–æ–¥—ñ–π
# -------------------------------
st.markdown("## üîÑ –°–∏–º—É–ª—è—Ü—ñ—è –ø–æ–¥—ñ–π")

event_steps = {
    "–°–∞–º–æ—Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è": ["–ê. –î–∏—Å–ø–µ—Ç—á–µ—Ä ‚Üí GSM", "–ë. GSM ‚Üí TP", "–í. TP —Ç–µ—Å—Ç—É—î", "–ì. –†–µ–∑—É–ª—å—Ç–∞—Ç ‚Üí –¥–∏—Å–ø–µ—Ç—á–µ—Ä"],
    "–ö–ó": ["–ê. TP –ø–µ—Ä–µ–¥–∞—î –ö–ó", "–ë. GSM –æ—Ç—Ä–∏–º—É—î", "–í. –ü–µ—Ä–µ–¥–∞—á–∞ –¥–æ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞", "–ì. –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è"],
    "–û–±—Ä–∏–≤": ["–ê. TP –≤–∏—è–≤–ª—è—î –æ–±—Ä–∏–≤", "–ë. GSM –ø—Ä–∏–π–º–∞—î", "–í. –ü–µ—Ä–µ–¥–∞—á–∞ –¥–æ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞"]
}
selected_event = st.selectbox("–û–±–µ—Ä—ñ—Ç—å –ø–æ–¥—ñ—é", list(event_steps.keys()))

if st.button("‚ñ∂Ô∏è –ê–Ω—ñ–º—É–≤–∞—Ç–∏ –ø–æ–¥—ñ—é"):
    steps = event_steps[selected_event]
    prog = st.progress(0)
    for i, step in enumerate(steps):
        st.write(f"**–ö—Ä–æ–∫ {i+1}/{len(steps)}:** {step}")
        time.sleep(0.7)
        prog.progress((i+1)/len(steps))
    st.success("‚úÖ –°–∏–º—É–ª—è—Ü—ñ—é –∑–∞–≤–µ—Ä—à–µ–Ω–æ")

# -------------------------------
# üï∏ –ì—Ä–∞—Ñ –º–µ—Ä–µ–∂—ñ
# -------------------------------
st.markdown("## üï∏ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –º–µ—Ä–µ–∂—ñ")

status_colors = {
    "–ù–æ—Ä–º–∞": "green",
    "–û–∂–µ–ª–µ–¥—å": "skyblue",
    "–ü–æ—Ä–∏–≤": "orange",
    "–í–∏–º–∫–Ω–µ–Ω–æ": "gray"
}

nodes = [
    Node(id="–î–∏—Å–ø–µ—Ç—á–µ—Ä", label="–î–∏—Å–ø–µ—Ç—á–µ—Ä", size=25, color="lightgray"),
    Node(id="GSM", label="GSM", size=20, color="lightblue")
]
edges = [Edge(source="–î–∏—Å–ø–µ—Ç—á–µ—Ä", target="GSM")]

for tp, blk in st.session_state.blocks.items():
    color = status_colors.get(blk["status"], "green") if blk["enabled"] else "gray"
    nodes.append(Node(id=tp, label=tp, color=color))
    edges.append(Edge(source="GSM", target=tp))

config = Config(width=800, height=500, directed=False, physics=True, hierarchical=False)
agraph(nodes=nodes, edges=edges, config=config)
