
import streamlit as st
import random
from datetime import datetime
import pandas as pd
import altair as alt

st.set_page_config(layout="wide")

# -------------------------------
# –î–∞–Ω—ñ –±–ª–æ–∫—ñ–≤
# -------------------------------
class Block:
    def __init__(self, name):
        self.name = name
        self.enabled = True
        self.status = "–ù–æ—Ä–º–∞"
        self.temperature = 0
        self.humidity = 0
        self.wind = 0

    def update_status(self):
        if not self.enabled:
            self.status = "–í–∏–º–∫–Ω–µ–Ω–æ"
        elif self.temperature < -5 and self.humidity > 80:
            self.status = "–û–∂–µ–ª–µ–¥—å"
        elif self.wind > 25:
            self.status = "–ü–æ—Ä–∏–≤"
        else:
            self.status = "–ù–æ—Ä–º–∞"

# -------------------------------
# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è
# -------------------------------
if "blocks" not in st.session_state:
    st.session_state.blocks = {f"BB{i}": Block(f"BB{i}") for i in range(1, 8)}
    st.session_state.events = []

# -------------------------------
# –õ—ñ–≤–∞ –ø–∞–Ω–µ–ª—å –∫–µ—Ä—É–≤–∞–Ω–Ω—è
# -------------------------------
st.sidebar.title("üîå –ö–µ—Ä—É–≤–∞–Ω–Ω—è")
for name, blk in st.session_state.blocks.items():
    blk.enabled = st.sidebar.toggle(f"{name}: {'üü¢' if blk.enabled else 'üî¥'}", value=blk.enabled)

# -------------------------------
# –í–µ—Ä—Ö–Ω—ñ–π –±–ª–æ–∫: —á–∞—Å, –æ–Ω–æ–≤–ª–µ–Ω–Ω—è, —Å—Ö–µ–º–∞
# -------------------------------
col1, col2 = st.columns([2, 3])

with col1:
    st.markdown("### üïí –ü–æ—Ç–æ—á–Ω–∏–π —á–∞—Å")
    st.markdown(f"**{datetime.now().strftime('%H:%M:%S')}**")

    if st.button("üîÅ –û–Ω–æ–≤–∏—Ç–∏"):
        for blk in st.session_state.blocks.values():
            blk.temperature = round(random.uniform(-15, 10), 1)
            blk.humidity = round(random.uniform(50, 100), 1)
            blk.wind = round(random.uniform(0, 40), 1)
            blk.update_status()
            st.session_state.events.append({
                "–ß–∞—Å": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
                "–ë–ª–æ–∫": blk.name,
                "–°—Ç–∞—Ç—É—Å": blk.status,
                "–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞": blk.temperature,
                "–í–æ–ª–æ–≥—ñ—Å—Ç—å": blk.humidity,
                "–í—ñ—Ç–µ—Ä": blk.wind
            })

with col2:
    st.image("https://raw.githubusercontent.com/m3t4lray/gpt-assets/main/gsm_schematic.png", use_container_width=True)

# -------------------------------
# –¢–∞–±–ª–∏—Ü—è –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤
# -------------------------------
st.markdown("### üìã –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ –±–ª–æ–∫—ñ–≤")
for blk in st.session_state.blocks.values():
    with st.expander(f"{blk.name} ‚Äî {blk.status}"):
        if blk.enabled:
            st.write(f"üå° –¢–µ–º–ø: {blk.temperature} ¬∞C | üíß –í–æ–ª–æ–≥—ñ—Å—Ç—å: {blk.humidity} % | üí® –í—ñ—Ç–µ—Ä: {blk.wind} –º/—Å")
        else:
            st.warning("–ë–ª–æ–∫ –≤–∏–º–∫–Ω–µ–Ω–æ")

# -------------------------------
# üîÅ –°–∏–º—É–ª—è—Ü—ñ—è –ø–æ–¥—ñ–π
# -------------------------------
st.markdown("### ‚öôÔ∏è –°–∏–º—É–ª—è—Ü—ñ—è –ø–æ–¥—ñ–π")

event_options = {
    "–°–∞–º–æ—Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è": [
        "–ê. –î–∏—Å–ø–µ—Ç—á–µ—Ä—Å—å–∫–∞ —Å—Ç–∞–Ω—Ü—ñ—è ‚Üí GSM",
        "–ë. GSM ‚Üí –±–ª–æ–∫ –≤–∏–Ω–æ—Å–Ω–∏–π",
        "–í. –ë–ª–æ–∫ —Ç–µ—Å—Ç—É—î —ñ –ø–æ–≤–µ—Ä—Ç–∞—î —Ä–µ–∑—É–ª—å—Ç–∞—Ç",
        "–ì. GSM ‚Üí –¥–∏—Å–ø–µ—Ç—á–µ—Ä—Å—å–∫–∞ —Å—Ç–∞–Ω—Ü—ñ—è",
        "–î. –í–∏–≤—ñ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É –Ω–∞ –º–æ–Ω—ñ—Ç–æ—Ä"
    ],
    "–û–ø–∏—Ç—É–≤–∞–Ω–Ω—è —Å–µ–Ω—Å–æ—Ä—ñ–≤": [
        "–ê. –î–∏—Å–ø–µ—Ç—á–µ—Ä—Å—å–∫–∞ —Å—Ç–∞–Ω—Ü—ñ—è ‚Üí GSM",
        "–ë. GSM ‚Üí –±–ª–æ–∫ –≤–∏–Ω–æ—Å–Ω–∏–π",
        "–í. –û–ø–∏—Ç—É–≤–∞–Ω–Ω—è —Å–µ–Ω—Å–æ—Ä—ñ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ"
    ],
    "–ü–æ—è–≤–∞ –ª—å–æ–¥—É": [
        "–ê. –î–∏—Å–ø–µ—Ç—á–µ—Ä—Å—å–∫–∞ —Å—Ç–∞–Ω—Ü—ñ—è ‚Üí GSM",
        "–ë. GSM ‚Üí –±–ª–æ–∫ –≤–∏–Ω–æ—Å–Ω–∏–π",
        "–í. –ö–æ–º–∞–Ω–¥–∞ –Ω–∞ –ø–ª–∞–≤–∫—É –ª—å–æ–¥—É",
        "–ì. –í–∫–ª—é—á–µ–Ω–æ –ø—Ä–∏—Å—Ç—Ä—ñ–π –ø–ª–∞–≤–ª–µ–Ω–Ω—è"
    ],
    "–ö–æ—Ä–æ—Ç–∫–µ –∑–∞–º–∏–∫–∞–Ω–Ω—è": [
        "–ê. –°–µ–Ω—Å–æ—Ä –ö–ó ‚Üí –±–ª–æ–∫ –≤–∏–Ω–æ—Å–Ω–∏–π",
        "–ë. –ë–ª–æ–∫ ‚Üí GSM",
        "–í. GSM ‚Üí –¥–∏—Å–ø–µ—Ç—á–µ—Ä",
        "–ì. –í–∏–≤—ñ–¥ –Ω–∞ –º–æ–Ω—ñ—Ç–æ—Ä"
    ],
    "–û–±—Ä–∏–≤ –ø—Ä–æ–≤–æ–¥—ñ–≤": [
        "–ê. –°–µ–Ω—Å–æ—Ä –æ–±—Ä–∏–≤—É ‚Üí –±–ª–æ–∫ –≤–∏–Ω–æ—Å–Ω–∏–π",
        "–ë. –ë–ª–æ–∫ ‚Üí GSM",
        "–í. GSM ‚Üí –¥–∏—Å–ø–µ—Ç—á–µ—Ä",
        "–ì. –í–∏–≤—ñ–¥ –Ω–∞ –º–æ–Ω—ñ—Ç–æ—Ä"
    ]
}

selected_event = st.selectbox("–û–±–µ—Ä—ñ—Ç—å –ø–æ–¥—ñ—é –¥–ª—è —Å–∏–º—É–ª—è—Ü—ñ—ó", list(event_options.keys()))
if st.button("‚ñ∂Ô∏è –°–∏–º—É–ª—é–≤–∞—Ç–∏ –ø–æ–¥—ñ—é"):
    for step in event_options[selected_event]:
        st.success(step)

# -------------------------------
# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è CSV –∂—É—Ä–Ω–∞–ª—É
# -------------------------------
st.markdown("### üóÇ –ñ—É—Ä–Ω–∞–ª –ø–æ–¥—ñ–π")
df_log = pd.DataFrame(st.session_state.events)
if not df_log.empty:
    st.dataframe(df_log, use_container_width=True)
    st.download_button("‚¨áÔ∏è –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ CSV", df_log.to_csv(index=False).encode("utf-8"), file_name="events.csv")
else:
    st.info("–ü–æ–¥—ñ–π —â–µ –Ω–µ –∑–∞—Ñ—ñ–∫—Å–æ–≤–∞–Ω–æ.")
