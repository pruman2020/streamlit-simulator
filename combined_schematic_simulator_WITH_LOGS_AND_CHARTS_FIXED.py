import altair as alt
import pandas as pd

import streamlit as st
import random
from datetime import datetime

st.set_page_config(layout="wide")

class Block:
    STATUS_NORMAL = "–ù–æ—Ä–º–∞"
    STATUS_ICE    = "–û–∂–µ–ª–µ–¥—å"
    STATUS_BREAK  = "–ü–æ—Ä–∏–≤"
    STATUS_OFF    = "–í–∏–º–∫–Ω–µ–Ω–æ"

    def __init__(self, name):
        self.name = name
        self.enabled = True
        self.status = self.STATUS_NORMAL
        self.temperature = 0
        self.humidity = 0
        self.wind = 0

    def toggle(self, enabled):
        self.enabled = enabled
        if not enabled:
            self.status = self.STATUS_OFF

    def update(self, temperature, humidity, wind):
        if not self.enabled:
            return
        self.temperature = temperature
        self.humidity = humidity
        self.wind = wind
        if temperature < -5 and humidity > 80:
            self.status = self.STATUS_ICE
        elif wind > 25:
            self.status = self.STATUS_BREAK
        else:
            self.status = self.STATUS_NORMAL

if "blocks" not in st.session_state:
    st.session_state.blocks = {f"BB{i}": Block(f"BB{i}") for i in range(1, 8)}
if "updated" not in st.session_state:
    st.session_state.updated = False

st.sidebar.title("‚öôÔ∏è –ö–µ—Ä—É–≤–∞–Ω–Ω—è –±–ª–æ–∫–∞–º–∏")
for name, blk in st.session_state.blocks.items():
    state = st.sidebar.toggle(f"{name}: {'üü¢' if blk.enabled else 'üî¥'}", value=blk.enabled)
    blk.toggle(state)

col1, col2 = st.columns([4, 1])
with col1:
    st.markdown("### üñ•Ô∏è –°–∏–º—É–ª—è—Ü—ñ—è –º–µ—Ä–µ–∂—ñ")
    if st.button("üîÅ –û–Ω–æ–≤–∏—Ç–∏ —Å—Ç–∞–Ω"):
        for blk in st.session_state.blocks.values():
            t = round(random.uniform(-15, 10), 1)
            h = round(random.uniform(50, 100), 1)
            w = round(random.uniform(0, 40), 1)
            blk.update(t, h, w)
        st.session_state.updated = True
with col2:
    st.markdown(f"<p style='text-align:right;'>–ü–æ—Ç–æ—á–Ω–∏–π —á–∞—Å:<br><b>{datetime.now().strftime('%H:%M:%S')}</b></p>", unsafe_allow_html=True)

st.markdown("""
<style>
    .overlay-container {
        position: relative;
        width: 100%;
        max-width: 960px;
        margin: auto;
    }
    .network-image {
        width: 100%;
    }
    .indicator {
        position: absolute;
        font-size: 20px;
    }
    .BB1 { top: 100px; left: 200px; }
    .BB2 { top: 100px; left: 370px; }
    .BB3 { top: 100px; left: 490px; }
    .BB4 { top: 270px; left: 200px; }
    .BB5 { top: 270px; left: 310px; }
    .BB6 { top: 180px; left: 280px; }
    .BB7 { top: 180px; left: 570px; }
</style>
""", unsafe_allow_html=True)

indicators_html = '''
<div class="overlay-container">
    <img src="https://raw.githubusercontent.com/m3t4lray/gpt-assets/main/schematic.png" class="network-image">
    {}
</div>
'''.format("\n".join(
    f'<div class="indicator BB{i}">{("üü¢" if blk.status=="–ù–æ—Ä–º–∞" else "üî¥")}</div>'
    for i, blk in enumerate(st.session_state.blocks.values(), start=1)
))

st.components.v1.html(indicators_html, height=560)

st.markdown("### üìã –î–µ—Ç–∞–ª—ñ –±–ª–æ–∫—ñ–≤")
for blk in st.session_state.blocks.values():
    with st.expander(f"{blk.name} ‚Äî –°—Ç–∞—Ç—É—Å: {blk.status}"):
        if blk.status != blk.STATUS_OFF:
            st.write(f"üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {blk.temperature} ¬∞C")
            st.write(f"üíß –í–æ–ª–æ–≥—ñ—Å—Ç—å: {blk.humidity} %")
            st.write(f"üí® –í—ñ—Ç–µ—Ä: {blk.wind} –º/—Å")
        else:
            st.info("–ë–ª–æ–∫ –≤–∏–º–∫–Ω–µ–Ω–æ.")


# -------------------------------
# üìä –í—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ—è –≥—Ä–∞—Ñ—ñ–∫—ñ–≤ –Ω–∏–∂—á–µ
# -------------------------------
st.markdown("## üìà –ü–æ–∫–∞–∑–Ω–∏–∫–∏ –¢–ü –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ–π –∑–∞–º—ñ—Ä")

data = {
    "–ë–ª–æ–∫": [],
    "–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞": [],
    "–í–æ–ª–æ–≥—ñ—Å—Ç—å": [],
    "–í—ñ—Ç–µ—Ä": []
}
for blk in st.session_state.blocks.values():
    if blk.status != blk.STATUS_OFF:
        data["–ë–ª–æ–∫"].append(blk.name)
        data["–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞"].append(blk.temperature)
        data["–í–æ–ª–æ–≥—ñ—Å—Ç—å"].append(blk.humidity)
        data["–í—ñ—Ç–µ—Ä"].append(blk.wind)

df_chart = pd.DataFrame(data)

if not df_chart.empty:
    st.line_chart(df_chart.set_index("–ë–ª–æ–∫")[["–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞"]])
    st.line_chart(df_chart.set_index("–ë–ª–æ–∫")[["–í–æ–ª–æ–≥—ñ—Å—Ç—å"]])
    st.line_chart(df_chart.set_index("–ë–ª–æ–∫")[["–í—ñ—Ç–µ—Ä"]])
else:
    st.info("–ù–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö –±–ª–æ–∫—ñ–≤ –¥–ª—è –ø–æ–±—É–¥–æ–≤–∏ –≥—Ä–∞—Ñ—ñ–∫—ñ–≤.")


import csv
import os

# -------------------------------
# üóÇ –õ–æ–≥—É–≤–∞–Ω–Ω—è –ø–æ–¥—ñ–π —É CSV
# -------------------------------
event_file = "events.csv"
new_entries = []

for blk in st.session_state.blocks.values():
    if blk.status != blk.STATUS_OFF:
        new_entries.append({
            "–ß–∞—Å": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
            "–ë–ª–æ–∫": blk.name,
            "–°—Ç–∞—Ç—É—Å": blk.status,
            "–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞": blk.temperature,
            "–í–æ–ª–æ–≥—ñ—Å—Ç—å": blk.humidity,
            "–í—ñ—Ç–µ—Ä": blk.wind
        })

if new_entries:
    file_exists = os.path.isfile(event_file)
    with open(event_file, "a", newline="", encoding="utf-8") as f:
        writer = csv.DictWriter(f, fieldnames=new_entries[0].keys())
        if not file_exists:
            writer.writeheader()
        writer.writerows(new_entries)

# -------------------------------
# üìà –î–æ–¥–∞—Ç–∫–æ–≤—ñ –≥—Ä–∞—Ñ—ñ–∫–∏
# -------------------------------
st.markdown("## üìä –î—ñ–∞–≥—Ä–∞–º–∏")

# –°—Ç–∞–Ω –∫–æ–∂–Ω–æ–≥–æ –±–ª–æ–∫–∞ ‚Äî bar chart
status_counts = {}
for blk in st.session_state.blocks.values():
    status_counts[blk.status] = status_counts.get(blk.status, 0) + 1

st.bar_chart(pd.DataFrame.from_dict(status_counts, orient="index", columns=["–ö—ñ–ª—å–∫—ñ—Å—Ç—å"]))

# –¢–µ–º–ø vs –í–æ–ª–æ–≥—ñ—Å—Ç—å (scatter)
scatter_data = pd.DataFrame([
    {
        "–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞": blk.temperature,
        "–í–æ–ª–æ–≥—ñ—Å—Ç—å": blk.humidity,
        "–ë–ª–æ–∫": blk.name
    }
    for blk in st.session_state.blocks.values()
    if blk.status != blk.STATUS_OFF
])

if not scatter_data.empty:
    st.markdown("### üå°Ô∏è –î—ñ–∞–≥—Ä–∞–º–∞ —Ä–æ–∑—Å—ñ—é–≤–∞–Ω–Ω—è: –¢–µ–º–ø vs –í–æ–ª–æ–≥—ñ—Å—Ç—å")
    st.altair_chart(
        alt.Chart(scatter_data).mark_circle(size=80).encode(
            x="–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞",
            y="–í–æ–ª–æ–≥—ñ—Å—Ç—å",
            color="–ë–ª–æ–∫",
            tooltip=["–ë–ª–æ–∫", "–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞", "–í–æ–ª–æ–≥—ñ—Å—Ç—å"]
        ).interactive(),
        use_container_width=True
    )
