
import streamlit as st
import random
from datetime import datetime

st.set_page_config(layout="wide")

# -------------------------------
# –î–∞–Ω—ñ —Ç–∞ —Ñ—É–Ω–∫—Ü—ñ—ó —Å–∏–º—É–ª—è—Ü—ñ—ó
# -------------------------------
class Block:
    STATUS_NORMAL = "–ù–æ—Ä–º–∞"
    STATUS_ICE    = "–û–∂–µ–ª–µ–¥—å"
    STATUS_BREAK  = "–ü–æ—Ä–∏–≤"
    STATUS_OFF    = "–í–∏–º–∫–Ω–µ–Ω–æ"

    def __init__(self, name):
        self.name = name
        self.enabled = True
        self.status = self.STATUS_NORMAL
        self.temperature = 0
        self.humidity = 0
        self.wind = 0

    def toggle(self, enabled):
        self.enabled = enabled
        if not enabled:
            self.status = self.STATUS_OFF

    def update(self, temperature, humidity, wind):
        if not self.enabled:
            return
        self.temperature = temperature
        self.humidity = humidity
        self.wind = wind
        if temperature < -5 and humidity > 80:
            self.status = self.STATUS_ICE
        elif wind > 25:
            self.status = self.STATUS_BREAK
        else:
            self.status = self.STATUS_NORMAL

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–ª–æ–∫—ñ–≤
if "blocks" not in st.session_state:
    st.session_state.blocks = {f"BB{i}": Block(f"BB{i}") for i in range(1, 8)}

# -------------------------------
# –ë–æ–∫–æ–≤–∞ –ø–∞–Ω–µ–ª—å —É–≤—ñ–º–∫–Ω–µ–Ω–Ω—è
# -------------------------------
st.sidebar.title("‚öôÔ∏è –ö–µ—Ä—É–≤–∞–Ω–Ω—è –±–ª–æ–∫–∞–º–∏")
for name, blk in st.session_state.blocks.items():
    state = st.sidebar.toggle(f"{name}: {'üü¢' if blk.enabled else 'üî¥'}", value=blk.enabled)
    blk.toggle(state)

# -------------------------------
# –ó–∞–≥–æ–ª–æ–≤–æ–∫ —ñ –ø–æ—Ç–æ—á–Ω–∏–π —á–∞—Å
# -------------------------------
st.markdown("<h2 style='text-align:center;'>GSM –ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥</h2>", unsafe_allow_html=True)
st.markdown(f"<p style='text-align:left;'>–ü–æ—Ç–æ—á–Ω–∏–π —á–∞—Å: {datetime.now().strftime('%H:%M:%S')}</p>", unsafe_allow_html=True)

# -------------------------------
# –û–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö
# -------------------------------
if st.button("üîÅ –û–Ω–æ–≤–∏—Ç–∏ —Å—Ç–∞–Ω"):
    for blk in st.session_state.blocks.values():
        t = round(random.uniform(-15, 10), 1)
        h = round(random.uniform(50, 100), 1)
        w = round(random.uniform(0, 40), 1)
        blk.update(t, h, w)
    st.experimental_rerun()

# -------------------------------
# –í—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ—è —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä—ñ–≤ –Ω–∞ —Ñ–æ–Ω—ñ —Å—Ö–µ–º–∏
# -------------------------------
st.markdown("""
    <style>
        .overlay-container {
            position: relative;
            width: 960px;
            height: 540px;
        }
        .network-image {
            width: 100%;
        }
        .indicator {
            position: absolute;
            font-size: 22px;
        }
        .BB1 { top: 100px; left: 200px; }
        .BB2 { top: 100px; left: 370px; }
        .BB3 { top: 100px; left: 490px; }
        .BB4 { top: 270px; left: 200px; }
        .BB5 { top: 270px; left: 310px; }
        .BB6 { top: 180px; left: 280px; }
        .BB7 { top: 180px; left: 570px; }
    </style>
"", unsafe_allow_html=True)

indicators_html = '''
<div class="overlay-container">
    <img src="https://raw.githubusercontent.com/m3t4lray/gpt-assets/main/schematic.png" class="network-image">
    {}
</div>
'''.format("\n".join(
    f'<div class="indicator BB{i}">{("üü¢" if blk.status=="–ù–æ—Ä–º–∞" else "üî¥")}</div>'
    for i, blk in enumerate(st.session_state.blocks.values(), start=1)
))

st.components.v1.html(indicators_html, height=560)

# -------------------------------
# –ü–æ–∫–∞–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤
# -------------------------------
with st.expander("üìã –î–µ—Ç–∞–ª—ñ –≤—Å—ñ—Ö –±–ª–æ–∫—ñ–≤"):
    for blk in st.session_state.blocks.values():
        st.markdown(f"**{blk.name}** ‚Äî –°—Ç–∞—Ç—É—Å: {blk.status}")
        if blk.status != blk.STATUS_OFF:
            st.write(f"üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {blk.temperature}¬∞C | üíß –í–æ–ª–æ–≥—ñ—Å—Ç—å: {blk.humidity}% | üí® –í—ñ—Ç–µ—Ä: {blk.wind} –º/—Å")
        st.markdown("---")
